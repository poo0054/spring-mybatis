<?xml version="1.0" encoding="UTF-8" ?>
<!--

    Copyright 2010-2022 the original author or authors.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "D:\project\source\mybatis-study\src\main\java\org\apache\ibatis\builder\xml\mybatis-3-config.dtd">
<configuration>

  <properties resource="resources/db.properties">
    <property name="driver" value="com.mysql.cj.jdbc.Driver"/>
  </properties>

  <settings>
    <!--    全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。-->
    <setting name="cacheEnabled" value="true"/>
    <!--    延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。-->
    <setting name="lazyLoadingEnabled" value="true"/>
    <!--    开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 否则，每个延迟加载属性会按需加载（参考 lazyLoadTriggerMethods)。-->
    <setting name="aggressiveLazyLoading" value="true"/>
    <!--    是否允许单个语句返回多结果集（需要数据库驱动支持）。-->
    <setting name="multipleResultSetsEnabled" value="true"/>
    <!--    使用列标签代替列名。实际表现依赖于数据库驱动，具体可参考数据库驱动的相关文档，或通过对比测试来观察。-->
    <setting name="useColumnLabel" value="true"/>
    <!--    允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。
    尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）。-->
    <setting name="useGeneratedKeys" value="false"/>
    <!--    指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。
    FULL 会自动映射任何复杂的结果集（无论是否嵌套）。-->
    <setting name="autoMappingBehavior" value="PARTIAL"/>
    <!--    指定发现自动映射目标未知列（或未知属性类型）的行为。
     NONE: 不做任何反应
    WARNING: 输出警告日志（'org.apache.ibatis.session.AutoMappingUnknownColumnBehavior' 的日志等级必须设置为 WARN）
    FAILING: 映射失败 (抛出 SqlSessionException)-->
    <setting name="autoMappingUnknownColumnBehavior" value="WARNING"/>
    <!--    配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（PreparedStatement）；
    BATCH 执行器不仅重用语句还会执行批量更新。-->
    <setting name="defaultExecutorType" value="SIMPLE"/>
    <!--    设置超时时间，它决定数据库驱动等待数据库响应的秒数。-->
    <setting name="defaultStatementTimeout" value="25"/>
    <!--    为驱动的结果集获取数量（fetchSize）设置一个建议值。此参数只可以在查询设置中被覆盖。-->
    <setting name="defaultFetchSize" value="100"/>
    <!--    是否允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。-->
    <setting name="safeRowBoundsEnabled" value="false"/>
    <!--    是否允许在嵌套语句中使用结果处理器（ResultHandler）。如果允许使用则设置为 false。-->
    <setting name="safeResultHandlerEnabled" value="false"/>
    <!--    是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。-->
    <setting name="mapUnderscoreToCamelCase" value="true"/>
    <!--    MyBatis 利用本地缓存机制（Local Cache）防止循环引用和加速重复的嵌套查询。
     默认值为 SESSION，会缓存一个会话中执行的所有查询。
     若设置值为 STATEMENT，本地缓存将仅用于执行语句，对相同 SqlSession 的不同查询将不会进行缓存。-->
    <setting name="localCacheScope" value="SESSION"/>
    <!--    当没有为参数指定特定的 JDBC 类型时，空值的默认 JDBC 类型。
    某些数据库驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。
    JdbcType 常量，常用值：NULL、VARCHAR 或 OTHER。-->
    <setting name="jdbcTypeForNull" value="OTHER"/>
    <!--    指定对象的哪些方法触发一次延迟加载。-->
    <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>
    <!--    指定动态 SQL 生成使用的默认脚本语言。-->
    <setting name="defaultScriptingLanguage" value="org.apache.ibatis.scripting.xmltags.XMLLanguageDriver"/>
    <!--    指定 Enum 使用的默认 TypeHandler 。（新增于 3.4.5）-->
    <setting name="defaultEnumTypeHandler" value="org.apache.ibatis.type.EnumTypeHandler"/>
    <!--    指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，
    这在依赖于 Map.keySet() 或 null 值进行初始化时比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的。
    -->
    <setting name="callSettersOnNulls" value="false"/>
    <!--    当返回行的所有列都是空时，MyBatis默认返回 null。
    当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集（如集合或关联）。（新增于 3.4.2）    -->
    <setting name="returnInstanceForEmptyRow" value="false"/>
    <!--    指定 MyBatis 增加到日志名称的前缀。	-->
    <setting name="logPrefix" value="mybatis --------------------- "/>
    <!--    指定 MyBatis 所用日志的具体实现，未指定时将自动查找。-->
    <setting name="logImpl" value="SLF4J"/>
    <!--    指定 Mybatis 创建可延迟加载对象所用到的代理工具。-->
    <setting name="proxyFactory" value="JAVASSIST"/>
    <!--    指定 VFS 的实现
    自定义 VFS 的实现的类全限定名，以逗号分隔。-->
    <!--    <setting name="vfsImpl" value=""/>-->
    <!--    允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，
    并且加上 -parameters 选项。（新增于 3.4.1）-->
    <setting name="useActualParamName" value="true"/>
    <!--    指定一个提供 Configuration 实例的类。 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。
    这个类必须包含一个签名为static Configuration getConfiguration() 的方法。（新增于 3.2.3）-->
    <!--    <setting name="configurationFactory" value="true"/>-->
  </settings>

  <typeAliases>
    <package name="poo0054.entity"/>
  </typeAliases>

  <!-- mybatis-config.xml -->
  <typeHandlers>
    <typeHandler handler="poo0054.ibatis.example.ExampleTypeHandler"/>
    <typeHandler handler="org.apache.ibatis.type.EnumOrdinalTypeHandler" javaType="java.math.RoundingMode"/>
  </typeHandlers>

  <!-- mybatis-config.xml
   每次 MyBatis 创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成实例化工作。
   默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认无参构造方法，要么通过存在的参数映射来调用带有参数的构造方法。
    如果想覆盖对象工厂的默认行为，可以通过创建自己的对象工厂来实现。-->
  <objectFactory type="poo0054.ibatis.example.ExampleObjectFactory">
    <property name="someProperty" value="100"/>
  </objectFactory>

  <!--   &lt;!&ndash;  用来创建ObjectWrapper &ndash;&gt;
     <objectWrapperFactory type="mybatisFactory.poo0054.ibatis.CustomObjectWrapperFactory"/>

     <reflectorFactory type="mybatisFactory.poo0054.ibatis.CustomReflectoryFactory"/>-->

  <!-- mybatis-config.xml -->
  <plugins>
    <plugin interceptor="poo0054.ibatis.example.ExamplePlugin">
      <property name="someProperty" value="100"/>
    </plugin>
  </plugins>

  <environments default="development">
    <environment id="development">
      <transactionManager type="JDBC"/>
      <dataSource type="POOLED">
        <property name="driver" value="${driver}"/>
        <property name="url" value="jdbc:mysql://192.168.56.10:3306/yidian_oms"/>
        <property name="username" value="${db.name}"/>
        <property name="password" value="${db.password}"/>
      </dataSource>
    </environment>
    <environment id="test">
      <transactionManager type="JDBC"/>
      <dataSource type="POOLED">
        <property name="driver" value="com.mysql.cj.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://192.168.56.10:3306/yidian_oms"/>
        <property name="username" value="${db.name}"/>
        <property name="password" value="${db.password}"/>
      </dataSource>
    </environment>
  </environments>

  <!--  如果需要自定义 type使用全类名
  使用： <select id="selectByPhone" resultType="Author" databaseId="oracle">
   -->
  <databaseIdProvider type="VENDOR">
    <property name="MySQL" value="mysql"/>
    <property name="SQL Server" value="sqlserver"/>
    <property name="DB2" value="db2"/>
    <property name="Oracle" value="oracle"/>
  </databaseIdProvider>

  <mappers>
    <!--    resource 和 url 是走一个资源解析 - XMLMapperBuilder -->
    <mapper resource="resources/mapper/TableAttributeDao.xml"/>
    <mapper resource="resources/mapper/TableDynamicDao.xml"/>
    <!--    <mapper url="mapper/SysUserDao.xml"/>-->

    <!-- mapper和package是直接使用mapperRegistry进行注册   -->
    <!--    <package name="poo0054.dao"/>-->
    <!--    <mapper class=" "/>-->
  </mappers>

</configuration>
